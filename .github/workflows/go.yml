# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Deploy to ECS

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  AWS_REGION: ap-southeast-1                   
  ECR_REPOSITORY: mommood        
  ECS_SERVICE: mommood2-service-ddmmvqgl               
  ECS_CLUSTER: mommood              
  ECS_TASK_DEFINITION: td.json
  IMAGE_TAG: latest
  CONTAINER_NAME: mommood

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: -exclude-dir=tests ./...

    - name: Test
      run: |
            go test -coverprofile=coverage.out -covermode count $(go list ./... | grep -v tests )
            go tool cover -func coverage.out

    - name: Test Coverage
      env:
          TESTCOVERAGE_THRESHOLD: 80
      run: |
            echo "checking test coverage ..."
            echo "Threshold             : $TESTCOVERAGE_THRESHOLD %"
            totalCoverage=`go tool cover -func=coverage.out | grep total | grep -Eo '[0-9]+\.[0-9]+'`
            echo "Current test coverage : $totalCoverage %"
            if (( $(echo "$totalCoverage $TESTCOVERAGE_THRESHOLD" | awk '{print ($1 > $2)}') )); then
                echo "OK"
            else
                echo "Current test coverage is below threshold."
                echo "Failed"
                exit 1
            fi

    - name: Build
      run: go build -v -o mommood .
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build Docker image and Push
      id: build-image
      env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
      run: |
          docker build --file ./Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    - name: Deploy Amazon ECS task
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
